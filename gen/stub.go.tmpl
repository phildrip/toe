// Code generated by github.com/phildrip/toe. DO NOT EDIT.
package {{ .PackageName }}

import (
    "sync"
)

{{ range .Methods }}
type {{ .Name }}Ret struct {
    {{- range $i, $r := .ResultNames }}
    {{ $r }} {{ index $.Methods 0 .Results $i }}
    {{- end }}
}

type {{ .Name }}Params struct {
    {{- range $i, $p := .ParamNames }}
    {{ $p }} {{ index $.Methods 0 .Params $i }}
    {{- end }}
}
{{ end }}

func NewStub{{ .InterfaceName }}() *Stub{{ .InterfaceName }} {
    stub := &Stub{{ .InterfaceName }}{}

    {{ range .Methods }}
    stub.Stub{{ .Name }}Then = &Stub{{ .Name }}Then{
        stub: stub,
    }
    {{ end }}

    return stub
}

type Stub{{ .InterfaceName }} struct {
    {{ range .Methods }}
    {{ .Name }}Ret {{ .Name }}Ret
    {{ .Name }}Calls []{{ .Name }}Params
    Stub{{ .Name }}Then *Stub{{ .Name }}Then
    {{ end }}

    mut sync.Mutex
}

{{ range .Methods }}
// Begin Stub{{ $.InterfaceName }}.{{ .Name }}
func (s *Stub{{ $.InterfaceName }}) {{ .Name }}({{ .Params | join ", " }}) {{ if .Results }}({{ .Results | join ", " }}){{ end }} {
    s.mut.Lock()
    defer s.mut.Unlock()
    s.{{ .Name }}Calls = append(s.{{ .Name }}Calls, {{ .Name }}Params{
        {{- range .ParamNames }}
        {{ . }},
        {{- end }}
    })

    // return all members of {{ .Name }}Ret
    {{- if .Results }}
    return {{ range $i, $r := .ResultNames }}{{if $i}}, {{end}}s.{{ $.Name }}Ret.{{ $r }}{{end}}
    {{- end }}
}

type Stub{{ .Name }}Then struct {
    stub *Stub{{ $.InterfaceName }}
}

func (s *Stub{{ .Name }}Then) Return({{ zip .ResultNames .Results "%s %s" | join ", " }}) {
    s.stub.{{ .Name }}Ret = {{ .Name }}Ret{
        {{ range .ResultNames }} {{ . }}: {{ . }}, {{ end }}
    }
}

func (s *Stub{{ $.InterfaceName }}) On{{ .Name }}() *Stub{{ .Name }}Then {
    return s.Stub{{ .Name }}Then
}
// End Stub{{ $.InterfaceName }}.{{ .Name }}
{{ end }}
